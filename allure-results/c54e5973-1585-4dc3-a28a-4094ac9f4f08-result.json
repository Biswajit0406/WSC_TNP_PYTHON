{"name": "test_logo_visibility", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=134.0.6998.89)\nStacktrace:\n\tGetHandleVerifier [0x00007FF70CBDFE45+26629]\n\t(No symbol) [0x00007FF70CB46010]\n\t(No symbol) [0x00007FF70C9D931A]\n\t(No symbol) [0x00007FF70C9B1753]\n\t(No symbol) [0x00007FF70CA5F6BE]\n\t(No symbol) [0x00007FF70CA7FA55]\n\t(No symbol) [0x00007FF70CA57883]\n\t(No symbol) [0x00007FF70CA20550]\n\t(No symbol) [0x00007FF70CA21803]\n\tGetHandleVerifier [0x00007FF70CF372BD+3529853]\n\tGetHandleVerifier [0x00007FF70CF4DA22+3621858]\n\tGetHandleVerifier [0x00007FF70CF424D3+3575443]\n\tGetHandleVerifier [0x00007FF70CCAB77A+860474]\n\t(No symbol) [0x00007FF70CB5088F]\n\t(No symbol) [0x00007FF70CB4CBC4]\n\t(No symbol) [0x00007FF70CB4CD66]\n\t(No symbol) [0x00007FF70CB3C2C9]\n\tBaseThreadInitThunk [0x00007FFE70BA7614+20]\n\tRtlUserThreadStart [0x00007FFE70CE26A1+33]", "trace": "self = <Test_Package.Test_loginpage.TestLoginPage object at 0x0000021375757A70>\n\n    def test_logo_visibility(self):\n        # self.lp = LoginPage(setup)  # Use `setup`, which is the driver\n        # assert self.lp.is_logo_visible()  # Use `self.lp`\n        self.lp = LoginPage(self.driver)\n>       assert self.lp.is_logo_visible()\n\nTest_Package\\Test_loginpage.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageObject\\loginpage.py:34: in is_logo_visible\n    logo = WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((self.LOGO)))\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:110: in _predicate\n    return driver.find_element(*locator)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000213758D9B80>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF70CB3C2C9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE70BA7614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFE70CE26A1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=134.0.6998.89)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF70CBDFE45+26629]\nE       \t(No symbol) [0x00007FF70CB46010]\nE       \t(No symbol) [0x00007FF70C9D931A]\nE       \t(No symbol) [0x00007FF70C9B1753]\nE       \t(No symbol) [0x00007FF70CA5F6BE]\nE       \t(No symbol) [0x00007FF70CA7FA55]\nE       \t(No symbol) [0x00007FF70CA57883]\nE       \t(No symbol) [0x00007FF70CA20550]\nE       \t(No symbol) [0x00007FF70CA21803]\nE       \tGetHandleVerifier [0x00007FF70CF372BD+3529853]\nE       \tGetHandleVerifier [0x00007FF70CF4DA22+3621858]\nE       \tGetHandleVerifier [0x00007FF70CF424D3+3575443]\nE       \tGetHandleVerifier [0x00007FF70CCAB77A+860474]\nE       \t(No symbol) [0x00007FF70CB5088F]\nE       \t(No symbol) [0x00007FF70CB4CBC4]\nE       \t(No symbol) [0x00007FF70CB4CD66]\nE       \t(No symbol) [0x00007FF70CB3C2C9]\nE       \tBaseThreadInitThunk [0x00007FFE70BA7614+20]\nE       \tRtlUserThreadStart [0x00007FFE70CE26A1+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "f1e6af90-9e07-4e10-bfa6-5624db9c3a53-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "2e8a68a3-eb5f-441b-ab71-5418ce7d141e-attachment.txt", "type": "text/plain"}], "start": 1742372129933, "stop": 1742372129937, "uuid": "5c07fa40-fc6e-4104-b356-b10e56af2216", "historyId": "3f9847a9db3ff6631ea17d9db2ac3b2e", "testCaseId": "3f9847a9db3ff6631ea17d9db2ac3b2e", "fullName": "Test_Package.Test_loginpage.TestLoginPage#test_logo_visibility", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "Test_Package"}, {"name": "suite", "value": "Test_loginpage"}, {"name": "subSuite", "value": "TestLoginPage"}, {"name": "host", "value": "C6-LAB-224"}, {"name": "thread", "value": "13168-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Package.Test_loginpage"}]}